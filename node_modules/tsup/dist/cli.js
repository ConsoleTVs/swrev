#!/usr/bin/env node
"use strict";

var _chunkW5E6DS1Sjs = require('./chunk.W5E6DS1S.js');


var _chunkDEUMEOWjjs = require('./chunk.DEUMEOWj.js');

// src/cli.ts
var _fs = require('fs');
var _path = require('path');
var _cac = require('cac');
function stringyOrArray(input, defaultValue) {
  if (!input) {
    return defaultValue;
  }
  return Array.isArray(input) ? input : input.split(",");
}
async function main() {
  const cli = _cac.cac.call(void 0, "tsup");
  cli.command("[...files]", "Bundle files", {
    ignoreOptionDefaultValue: true
  }).option("-d, --out-dir <dir>", "Output directory", {default: "dist"}).option("--format <format>", 'Bundle format, "cjs", "iife", "esm"', {
    default: "cjs"
  }).option("--minify", "Minify bundle").option("--minify-whitespace", "Minify whitespace").option("--minify-identifiers", "Minify identifiers").option("--minify-syntax", "Minify syntax").option("--target <target>", 'Bundle target, "es20XX" or "esnext"', {
    default: "es2017"
  }).option("--babel", "Transform the result with Babel").option("--legacy-output", "Output different formats to different folder instead of using different extensions").option("--dts", "Generate declaration file").option("--sourcemap", "Generate sourcemap file").option("--watch", "Watch mode").option("--env.* <value>", "Define compile-time env variables").option("--define.* <value>", "Define compile-time constants").option("--external <name>", "Mark specific packages as external").option("--global-name <name>", "Global variable name for iife format").option("--jsxFactory <jsxFactory>", "Name of JSX factory function", {
    default: "React.createElement"
  }).option("--jsxFragment <jsxFragment>", "Name of JSX fragment function", {
    default: "React.Fragment"
  }).option("--inlineDynamicImports", "Create a single bundle that inlines dynamic imports").action(async (files, options) => {
    if (files.length === 0) {
      throw new (0, _chunkDEUMEOWjjs.PrettyError)(`Missing input files, e.g. tsup src/index.ts`);
    }
    const {build: build2} = await Promise.resolve().then(() => require("./index.js"));
    await build2({
      ...options,
      entryPoints: files,
      format: stringyOrArray(options.format, ["cjs"]),
      external: stringyOrArray(options.external, [])
    });
  });
  cli.help();
  const pkgPath = _path.join.call(void 0, __dirname, "../package.json");
  cli.version(JSON.parse(_fs.readFileSync.call(void 0, pkgPath, "utf8")).version);
  cli.parse(process.argv, {run: false});
  await cli.runMatchedCommand();
}
main().catch(_chunkW5E6DS1Sjs.handlError);
