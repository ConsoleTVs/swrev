import { BuildResult } from 'esbuild';

declare type Format = 'cjs' | 'esm' | 'iife';
declare type Options = {
    entryPoints: string[];
    /**
     * Output different formats to differen folder instead of using different extensions
     */
    legacyOutput?: boolean;
    /**
     * Compile target, like `es2018`
     */
    target?: string;
    minify?: boolean;
    minifyWhitespace?: boolean;
    minifyIdentifiers?: boolean;
    minifySyntax?: boolean;
    watch?: boolean;
    jsxFactory?: string;
    jsxFragment?: string;
    outDir?: string;
    format: Format[];
    globalName?: string;
    env?: {
        [k: string]: string;
    };
    define?: {
        [k: string]: string;
    };
    dts?: boolean;
    sourcemap?: boolean;
    /** Don't bundle these packages */
    external?: string[];
    /** Transform the result with `@babel/core` */
    babel?: boolean;
};
declare const makeLabel: (input: string, type: 'info' | 'success' | 'error') => string;
declare function runEsbuild(options: Options, { format }: {
    format: Format;
}): Promise<BuildResult | undefined>;
declare function build(options: Options): Promise<void>;

export { Format, Options, build, makeLabel, runEsbuild };
